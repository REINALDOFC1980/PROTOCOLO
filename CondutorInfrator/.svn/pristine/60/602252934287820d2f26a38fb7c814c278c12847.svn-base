using CondutorInfrator.Models;
using CondutorInfrator.Rpt_class;
using CondutorInfrator.Util;
using Dapper;
using System;
using System.Configuration;
using System.IO;
using System.Linq;
using System.Security.Claims;
using System.Web;
using System.Web.Helpers;
using System.Web.Mvc;

namespace CondutorInfrator.Controllers.CNPJ
{
    public class Juridico_DefesaAutuacaoController : Controller
    {
        Funcao funcao = new Funcao();

        public ActionResult Download(string ext, string pro_numero)
        {
            var contentType = "";

            var caminhoArquivo = ConfigurationManager.AppSettings["Vlo_CaminhoAnexo"] + pro_numero + "\\" + ext;
            var extensao = Path.GetExtension(caminhoArquivo);
            var nomeArquivoV = ext;
            if (extensao.Equals(".pdf") || extensao.Equals(".PDF"))
                contentType = "application/pdf";
            if (extensao.Equals(".jpeg") || extensao.Equals(".JPEG"))
                contentType = "application/image";

            if (System.IO.File.Exists(caminhoArquivo))
            {
                return File(caminhoArquivo, contentType, nomeArquivoV);
            }
            else
            {
                return RedirectToAction("situacaoprocesso_defesa", "defesaautuacao", new { pro_numero });
            }
        }

        public ActionResult ConfirmacaoDados_Defesa(string mut_ait)
        {
            var _ptr_cpf_cnpj = ((ClaimsIdentity)User.Identity).FindFirst(ClaimTypes.PrimarySid).Value;
            try
            {
                if (funcao.StatusProcesso(mut_ait, "2") != 0)
                    return RedirectToAction("processosabertos", "processo");

                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@VloCampo", "Proprietario");
                parameters.Add("@VloBusca1", _ptr_cpf_cnpj);
                parameters.Add("@VloBusca2", mut_ait);
                parameters.Add("@VloBusca3", "");
                ProcessoViewModel VCM = DapperORM.DapperORM.ReturnList<ProcessoViewModel>("STb_Processo_Localizar_Dapper", parameters).FirstOrDefault<ProcessoViewModel>();

                return View(VCM);
            }
            catch (Exception ex)
            {
                return RedirectToAction("login", "LogOut");
            }

        }

        [HttpPost]
        public JsonResult ProcGerarProcesso_Defesa()
        {

            try
            {

                // gerando o processo
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@Pro_CPF_CNPJ", Request.Params["Ptr_CPF_CNPJ"]);
                parameters.Add("@Vec_Placa", Request.Params["Vec_Placa"]);
                parameters.Add("@Vec_RENAVAN", Request.Params["Vec_RENAVAN"]);
                parameters.Add("@Vec_Ano", Request.Params["Vec_Ano"]);
                parameters.Add("@Vec_Marca", Request.Params["Vec_Marca"]);
                parameters.Add("@Mut_AIT", Request.Params["Mut_AIT"]);
                parameters.Add("@Mut_CodigoInfracao", Request.Params["Mut_CodigoInfracao"]);
                parameters.Add("@Mut_DescricaoInfracao", Request.Params["Mut_DescricaoInfracao"]);
                parameters.Add("@Mut_DataInfracao", Request.Params["Mut_DataInfracao"]);
                parameters.Add("@Ptr_CPFRepreLegal", Request.Params["Ptr_CPFRepreLegal"]);
                parameters.Add("@Ptr_NomeRepreLegal", Request.Params["Ptr_NomeRepreLegal"]);


                DapperORM.DapperORM.ExecuteWithouReturn("Stb_Gerar_Processo_DefesaAutuacao_Dapper", parameters);

                ////Buscando o processo gerado
                DynamicParameters parameters_ = new DynamicParameters();
                parameters_.Add("@VloCampo", "Processo");
                parameters_.Add("@VloBusca1", Request.Params["Ptr_CPF_CNPJ"]);
                parameters_.Add("@VloBusca2", Request.Params["Mut_AIT"]);
                parameters_.Add("@VloBusca3", "2");

                var processoViewModel = DapperORM.DapperORM.ReturnList<ProcessoViewModel>("STb_Processo_Localizar_Dapper", parameters_).FirstOrDefault<ProcessoViewModel>();

                // caso nao exista emitir um erro
                if (processoViewModel == null)
                    return Json(new { error = true }, JsonRequestBehavior.AllowGet);

                var Pro_Numero = processoViewModel.Pro_Numero;
                var Mut_ait = processoViewModel.Mut_AIT;

                if (processoViewModel.Pro_Svc_Id == 1)
                    return Json(new { redirectUrl = Url.Action("anexadocumento", "Juridico_apresentacaocondutor"), isRedirect = true, pro_Numero = Pro_Numero, mut_ait = Mut_ait }, JsonRequestBehavior.AllowGet);
                else
                    return Json(new { redirectUrl = Url.Action("anexadocumento_defesa", "Juridico_defesaautuacao"), isRedirect = true, pro_Numero = Pro_Numero, mut_ait = Mut_ait }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                return Json(new {  error = true }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult AnexaDocumento_Defesa(string pro_Numero, string mut_ait)
        {
            try
            {
                //situacao caso o usuario click em voltar e evitar anexar duas vezes
                if (funcao.StatusProcesso(pro_Numero, "2") != 13 && funcao.StatusProcesso(pro_Numero, "2") != 21)
                    return RedirectToAction("processosabertos", "processo");

                //Buscando o processo gerado
                DynamicParameters parameters_ = new DynamicParameters();
                parameters_.Add("@VloCampo", "Processo");
                parameters_.Add("@VloBusca1", pro_Numero);
                parameters_.Add("@VloBusca2", "");
                parameters_.Add("@VloBusca3", "2");

                ProcessoViewModel processoViewModel = DapperORM.DapperORM.ReturnList<ProcessoViewModel>("STb_Processo_Localizar_Dapper", parameters_).FirstOrDefault<ProcessoViewModel>();

                if (processoViewModel == null || processoViewModel.HisPro_StsPro_Id != 13 && processoViewModel.HisPro_StsPro_Id != 21)
                    return RedirectToAction("processosabertos", "processo");


                //verificando se existe processo de condutor aberto para o AIT
                if (funcao.StatusProcesso(mut_ait, "1") == 4)
                    ViewData["ProcessoExistente"] = "Sim";
                else
                    ViewData["ProcessoExistente"] = "Nao";

                return View(processoViewModel);

            }
            catch (Exception)
            {
                return RedirectToAction("LogOut", "autenticacao");
            }

        }

        [HttpPost]
        public JsonResult FinalizarAberturaDefesa(HttpPostedFileBase[] COMPROBATORIOS)
        {
            try
            {
                var pro_numero = Request.Params["Pro_Numero"];
                var ait_numero = Request.Params["Mut_AIT"];
                var ptr_TipoEmpresa = Request.Params["Ptr_TipoEmpresa"];
                var anexoPendente = Request.Params["AnexoPendente"];

                var Restricao_Con = 1;
                var Restricao_Final = 1;

                //VERIFICANDO ERROS NO AIT
                var CPF_Requerente = ((ClaimsIdentity)User.Identity).FindFirst(ClaimTypes.PrimarySid).Value;

                //SÓ PRA PEGAR O Restricao_Con 3
                var ErroModel = funcao.AnalisarAIT(ait_numero, CPF_Requerente, "Stb_AnalisarAIT_DefesaAutuacao_CI_Dapper");
                if (ErroModel != null)
                {
                    if (ErroModel.ID == "DA_Erro_1")
                        Restricao_Con = 3;
                }

                //Deleta caso tenha na base
                DynamicParameters parameters = new DynamicParameters();
                parameters.Add("@Pro_Codigo", pro_numero);
                DapperORM.DapperORM.ExecuteWithouReturn("Stb_Anexo_Delete_Dapper", parameters);


                var NomeDoc = "";
                var Id_user_logado = ((ClaimsIdentity)User.Identity).FindFirst(ClaimTypes.Sid).Value;
                var path = ConfigurationManager.AppSettings["Vlo_CaminhoAnexo"] + pro_numero + "\\";
                var pathTemp = ConfigurationManager.AppSettings["Vlo_CaminhoAnexo_Temp"] + pro_numero + "\\";
                var pathComprobatorio = ConfigurationManager.AppSettings["Vlo_CaminhoAnexo"] + pro_numero + "\\COMPROBATORIOS\\";


                //craiado as pastas
                funcao.CriarPasta(path);
                funcao.CriarPasta(pathComprobatorio);
                funcao.CriarPasta(pathTemp);

                HttpFileCollectionBase files = Request.Files;

                //Upload das img
                for (int i = 0; i < files.Count; i++)
                {
                    HttpPostedFileBase file = files[i];
                    string Nome = Request.Files.AllKeys[i];

                    //upload  pdf
                    if (file.ContentType == "application/pdf")
                    {
                        if (Nome == "COMPROBATORIOS")
                            NomeDoc = Nome + "_" + pro_numero+'_'+ i + ".PDF";
                        else
                            NomeDoc = Nome + "_" + pro_numero + ".PDF";


                        file.SaveAs(path + NomeDoc);
                        //--Convertendo PDF em IMG, salvando no banco e deletando a pasta TEMP
                        ConvertPDFtoIMG convertPDFtoIMG = new ConvertPDFtoIMG();
                        convertPDFtoIMG.ConvertPdfToImage(NomeDoc, pro_numero, Nome);

                        //salvado nas tabelas anexo e historico
                        funcao.AnexoArquivo_banco(pro_numero, Nome, NomeDoc);

                    }
                    else //upload  imagem
                    if (file.ContentType == "image/jpeg")
                    {
                        try
                        {
                            NomeDoc = Nome + "_" + pro_numero + ".JPEG";
                            WebImage img = new WebImage(file.InputStream);

                            if (img.ImageFormat != "jpeg")
                                return Json(new { formatoimg = false, imagemerro = funcao.NomeAnexo(Nome) }, JsonRequestBehavior.AllowGet);
                            else
                            {
                                if (Nome == "COMPROBATORIOS")
                                {
                                    NomeDoc = i + Nome + "_" + pro_numero + ".JPEG";

                                    if (img.Width > 800)
                                        img.Resize(680, 800);

                                    //salvando a imagem na pasta comprobatorio para poder separar apenas as imagens de comprobatorio e gerar um PDF
                                    img.Save(pathComprobatorio + NomeDoc);
                                    //salvando na pasta final
                                    img.Save(path + NomeDoc);
                                    //verifica se salvou na pasta
                                    if (funcao.ArquivoExistente(path + NomeDoc) == false)
                                    {
                                        return Json(new { error = true });
                                    }

                                    funcao.SalvarImgbanco(pathComprobatorio + NomeDoc, Nome, pro_numero);
                                }
                                else
                                {
                                    if (img.Width > 800)
                                        img.Resize(680, 800);

                                    //salvando a imagem na pasta
                                    img.Save(path + NomeDoc);
                                    //verificando se salvou na pasta
                                    if (funcao.ArquivoExistente(path + NomeDoc) == false)
                                    {
                                        return Json(new { error = true });
                                    }

                                    //Salvando imagem no banco 
                                    funcao.SalvarImgbanco(path + NomeDoc, Nome, pro_numero);
                                    //}
                                    //--salvado nas tabelas anexo e historico
                                    funcao.AnexoArquivo_banco(pro_numero, Nome, NomeDoc);
                                }

                            }
                        }
                        catch (Exception ex)
                        {
                            return Json(new { formatoimg = false, imagemerro = funcao.NomeAnexo(Nome) }, JsonRequestBehavior.AllowGet);
                        }
                        
                    }
                }

                //Convertendo para pdf para Nadiane

                if (Restricao_Con == 1 && anexoPendente == "1")
                    Restricao_Final = 1;
                if (Restricao_Con == 3 && anexoPendente == "1")
                    Restricao_Final = 3;
                if (Restricao_Con == 1 && anexoPendente == "6")
                    Restricao_Final = 6;
                if (Restricao_Con == 3 && anexoPendente == "6")
                    Restricao_Final = 8;

                funcao.Convert_Img_PDF(pathComprobatorio);

                //--confirmando o processo

                DynamicParameters parameters1 = new DynamicParameters();
                parameters1.Add("@pro_Numero", pro_numero);
                parameters1.Add("@Req_TipoEmpresa", ptr_TipoEmpresa);
                parameters1.Add("@Prt_restricao", Restricao_Final);
                DapperORM.DapperORM.ExecuteWithouReturn("STb_Integracao_Protocolo_DefesaAutuacao_Dapper", parameters1);


                return Json(new { redirectUrl = Url.Action("SituacaoProcesso_Defesa", "Juridico_DefesaAutuacao"), isRedirect = true, pro_numero }, JsonRequestBehavior.AllowGet);

                if (Directory.Exists(pathComprobatorio))
                {
                    Directory.Delete(pathComprobatorio, true);
                }
            }
            catch (Exception ex)
            {
                return Json(new {  error = true }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SituacaoProcesso_Defesa(string pro_numero)
        {

            DynamicParameters parameters_ = new DynamicParameters();
            parameters_.Add("@VloCampo", "Processo");
            parameters_.Add("@VloBusca1", pro_numero);
            parameters_.Add("@VloBusca2", "");
            parameters_.Add("@VloBusca3", "2");

            var processoViewModel = DapperORM.DapperORM.ReturnList<ProcessoViewModel>("STb_Processo_Localizar_Dapper", parameters_).FirstOrDefault<ProcessoViewModel>();

            processoViewModel.Anexos = funcao.ObterAnexosPorDemanda(pro_numero);

            if (processoViewModel == null)
                return RedirectToAction("processosabertos", "processo");

            return View(processoViewModel);
        }

        public ActionResult ImprimirFormulario(string numeroait, string peticao)
        {
            CrystalReport crystalR = new CrystalReport();
            crystalR.Formulario_Defesa(numeroait, peticao);

            return View();
        }

        //public static void Convert_Img_PDF(string caminho)
        //{
        //    //Document Doc = new Document(PageSize.LETTER, 20, 20, 20, 20);
        //    Document Doc = new Document(PageSize.A4, 2, 2, 2, 2);
        //    string PDFOutput = caminho + "COMPROBRATORIO.pdf";

        //    string Folder = caminho;


        //    PdfWriter writer = PdfWriter.GetInstance(Doc, new FileStream(PDFOutput, FileMode.Create, FileAccess.Write, FileShare.Read));
        //    Doc.Open();

        //    //verifianco se existe arquivo
        //    DirectoryInfo di = new DirectoryInfo(Folder);
        //    FileInfo[] TXTFiles = di.GetFiles("*.jpeg");
        //    if (TXTFiles.Length != 0)
        //    {
        //        foreach (string F in Directory.GetFiles(Folder, "*.jpeg"))
        //        {
        //            if (F != null)
        //            {
        //                Doc.NewPage();
        //                Doc.Add(new Jpeg(new Uri(new FileInfo(F).FullName)));
        //            }

        //        }
        //        Doc.Close();
        //    }
        //}









    }
}